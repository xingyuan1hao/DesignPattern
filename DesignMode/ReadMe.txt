1.简单工厂模式
    不符合开闭原则
2.策略模式
    定义了算法家族，分别封装起来，让他们之间可以相互替换，此模式让算法的变化不会影响到使用算法的客户。
3.装饰模式
	动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成自雷更为灵活。
4.代理模式
	为其他对象提供一种代理以控制对这个对象的访问。
5.原型模式
   用原型实例指定创建对象的种类，并且通过拷贝这些原型穿创建新的对象。
6.工厂模式
	定义个创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。
7.模板方法模式
   定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义改算法的某些特定步骤。
8.外观模式
   为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
9.建造者模式
   将一个复杂对象的构建与它的标示分离，使得同样的构建过程可以创建不同的表示。
10.观察者模式
	定义个一种一对多的依赖关系，让多个观察者对象同事监听某一主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使他们能够自动更新自己。
11.抽象工厂模式
    提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们的具体的类。
12.状态模式
    当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。
13.适配器模式
    将一个类的接口转换成客户希望的另外一个接口。Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
14.备忘录模式
    在不破坏类封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该状态恢复到原来保存的状态。
15.组合模式
    将对象组合成树形结构以表示部分-整体的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。
16.迭代器模式
   提供一种方法顺序访问一个聚合对象的各个元素，而又不暴露该对象的内部表示。
17.单例模式
   保证一个类仅有一个实例，并提供一个访问它的全局访问点。
18.桥接模式
   将抽象部分与它的实现部分分离，使得他们可以独立地变化。
19.命令模式
   将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求队列或记录请求日志，以及支持可撤销的操作。
20.职责连模式
   使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，只到有一个对象处理它为止。
21.中介者模式
   用一个中介对象来封装一系列的对象交互。中介者事各对象不需要显示的相互引用，从而使其耦合松散，而且可以独立的改变它们之间的交互。
22.享元模式
  运用共享技术有效地支持大量细粒度的对象。
23.解释器模式
  给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。
24.访问者模式
  表示一个作用于某对象结构中的各个元素的操作。他使你可以在不改变个元素的类的前提下定义作用于这些元素的新操作。